// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="zynq_base_v_tpg_0_0_v_tpg,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=13.468000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.269000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=4859,HLS_SYN_LUT=6804,HLS_VERSION=2020_2}" *)

module zynq_base_v_tpg_0_0_v_tpg (
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        fid_in,
        m_axis_video_TDATA,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        fid,
        fid_ap_vld,
        m_axis_video_TVALID,
        m_axis_video_TREADY
);

parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input   fid_in;
output  [23:0] m_axis_video_TDATA;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
output   fid;
output   fid_ap_vld;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;

 reg    ap_rst_n_inv;
wire   [15:0] height;
wire   [15:0] width;
wire   [7:0] bckgndId;
wire   [7:0] ovrlayId;
wire   [7:0] maskId;
wire   [7:0] motionSpeed;
wire   [7:0] colorFormat;
wire   [15:0] crossHairX;
wire   [15:0] crossHairY;
wire   [15:0] ZplateHorContStart;
wire   [15:0] ZplateHorContDelta;
wire   [15:0] ZplateVerContStart;
wire   [15:0] ZplateVerContDelta;
wire   [15:0] boxSize;
wire   [15:0] boxColorR;
wire   [15:0] boxColorG;
wire   [15:0] boxColorB;
wire   [7:0] dpDynamicRange;
wire   [7:0] dpYUVCoef;
wire   [15:0] field_id;
wire   [15:0] bck_motion_en;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    tpgBackground_U0_ap_start;
wire    tpgBackground_U0_ap_done;
wire    tpgBackground_U0_ap_continue;
wire    tpgBackground_U0_ap_idle;
wire    tpgBackground_U0_ap_ready;
wire    tpgBackground_U0_start_out;
wire    tpgBackground_U0_start_write;
wire   [23:0] tpgBackground_U0_outImg_din;
wire    tpgBackground_U0_outImg_write;
wire    tpgForeground_U0_ap_start;
wire    tpgForeground_U0_ap_done;
wire    tpgForeground_U0_ap_continue;
wire    tpgForeground_U0_ap_idle;
wire    tpgForeground_U0_ap_ready;
wire    tpgForeground_U0_start_out;
wire    tpgForeground_U0_start_write;
wire    tpgForeground_U0_srcImg_read;
wire   [23:0] tpgForeground_U0_outImg_din;
wire    tpgForeground_U0_outImg_write;
wire    MultiPixStream2AXIvideo_U0_ap_start;
wire    MultiPixStream2AXIvideo_U0_ap_done;
wire    MultiPixStream2AXIvideo_U0_ap_continue;
wire    MultiPixStream2AXIvideo_U0_ap_idle;
wire    MultiPixStream2AXIvideo_U0_ap_ready;
wire    MultiPixStream2AXIvideo_U0_ovrlayYUV_read;
wire   [0:0] MultiPixStream2AXIvideo_U0_fid_in;
wire   [0:0] MultiPixStream2AXIvideo_U0_fid;
wire    MultiPixStream2AXIvideo_U0_fid_ap_vld;
wire   [23:0] MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
wire    MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
wire   [2:0] MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
wire   [2:0] MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TID;
wire   [0:0] MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
wire    ap_sync_continue;
wire    bckgndYUV_full_n;
wire   [23:0] bckgndYUV_dout;
wire    bckgndYUV_empty_n;
wire    ovrlayYUV_full_n;
wire   [23:0] ovrlayYUV_dout;
wire    ovrlayYUV_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_tpgForeground_U0_din;
wire    start_for_tpgForeground_U0_full_n;
wire   [0:0] start_for_tpgForeground_U0_dout;
wire    start_for_tpgForeground_U0_empty_n;
wire   [0:0] start_for_MultiPixStream2AXIvideo_U0_din;
wire    start_for_MultiPixStream2AXIvideo_U0_full_n;
wire   [0:0] start_for_MultiPixStream2AXIvideo_U0_dout;
wire    start_for_MultiPixStream2AXIvideo_U0_empty_n;
wire    MultiPixStream2AXIvideo_U0_start_full_n;
wire    MultiPixStream2AXIvideo_U0_start_write;

zynq_base_v_tpg_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .height(height),
    .width(width),
    .bckgndId(bckgndId),
    .ovrlayId(ovrlayId),
    .maskId(maskId),
    .motionSpeed(motionSpeed),
    .colorFormat(colorFormat),
    .crossHairX(crossHairX),
    .crossHairY(crossHairY),
    .ZplateHorContStart(ZplateHorContStart),
    .ZplateHorContDelta(ZplateHorContDelta),
    .ZplateVerContStart(ZplateVerContStart),
    .ZplateVerContDelta(ZplateVerContDelta),
    .boxSize(boxSize),
    .boxColorR(boxColorR),
    .boxColorG(boxColorG),
    .boxColorB(boxColorB),
    .dpDynamicRange(dpDynamicRange),
    .dpYUVCoef(dpYUVCoef),
    .field_id(field_id),
    .bck_motion_en(bck_motion_en),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

zynq_base_v_tpg_0_0_tpgBackground tpgBackground_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(tpgBackground_U0_ap_start),
    .start_full_n(start_for_tpgForeground_U0_full_n),
    .ap_done(tpgBackground_U0_ap_done),
    .ap_continue(tpgBackground_U0_ap_continue),
    .ap_idle(tpgBackground_U0_ap_idle),
    .ap_ready(tpgBackground_U0_ap_ready),
    .start_out(tpgBackground_U0_start_out),
    .start_write(tpgBackground_U0_start_write),
    .height(height),
    .width(width),
    .bck_motion_en(bck_motion_en),
    .patternId(bckgndId),
    .ZplateHorContStart(ZplateHorContStart),
    .ZplateHorContDelta(ZplateHorContDelta),
    .ZplateVerContStart(ZplateVerContStart),
    .ZplateVerContDelta(ZplateVerContDelta),
    .dpDynamicRange(dpDynamicRange),
    .dpYUVCoef(dpYUVCoef),
    .motionSpeed(motionSpeed),
    .colorFormat(colorFormat),
    .outImg_din(tpgBackground_U0_outImg_din),
    .outImg_full_n(bckgndYUV_full_n),
    .outImg_write(tpgBackground_U0_outImg_write)
);

zynq_base_v_tpg_0_0_tpgForeground tpgForeground_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(tpgForeground_U0_ap_start),
    .start_full_n(start_for_MultiPixStream2AXIvideo_U0_full_n),
    .ap_done(tpgForeground_U0_ap_done),
    .ap_continue(tpgForeground_U0_ap_continue),
    .ap_idle(tpgForeground_U0_ap_idle),
    .ap_ready(tpgForeground_U0_ap_ready),
    .start_out(tpgForeground_U0_start_out),
    .start_write(tpgForeground_U0_start_write),
    .srcImg_dout(bckgndYUV_dout),
    .srcImg_empty_n(bckgndYUV_empty_n),
    .srcImg_read(tpgForeground_U0_srcImg_read),
    .height(height),
    .width(width),
    .patternId(ovrlayId),
    .maskId(maskId),
    .colorFormat(colorFormat),
    .crossHairX(crossHairX),
    .crossHairY(crossHairY),
    .boxSize(boxSize),
    .boxColorR(boxColorR),
    .boxColorG(boxColorG),
    .boxColorB(boxColorB),
    .motionSpeed(motionSpeed),
    .outImg_din(tpgForeground_U0_outImg_din),
    .outImg_full_n(ovrlayYUV_full_n),
    .outImg_write(tpgForeground_U0_outImg_write)
);

zynq_base_v_tpg_0_0_MultiPixStream2AXIvideo MultiPixStream2AXIvideo_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(MultiPixStream2AXIvideo_U0_ap_start),
    .ap_done(MultiPixStream2AXIvideo_U0_ap_done),
    .ap_continue(MultiPixStream2AXIvideo_U0_ap_continue),
    .ap_idle(MultiPixStream2AXIvideo_U0_ap_idle),
    .ap_ready(MultiPixStream2AXIvideo_U0_ap_ready),
    .ovrlayYUV_dout(ovrlayYUV_dout),
    .ovrlayYUV_empty_n(ovrlayYUV_empty_n),
    .ovrlayYUV_read(MultiPixStream2AXIvideo_U0_ovrlayYUV_read),
    .height(height),
    .width(width),
    .colorFormat(colorFormat),
    .fid_in(MultiPixStream2AXIvideo_U0_fid_in),
    .fid(MultiPixStream2AXIvideo_U0_fid),
    .fid_ap_vld(MultiPixStream2AXIvideo_U0_fid_ap_vld),
    .field_id(field_id),
    .m_axis_video_TDATA(MultiPixStream2AXIvideo_U0_m_axis_video_TDATA),
    .m_axis_video_TVALID(MultiPixStream2AXIvideo_U0_m_axis_video_TVALID),
    .m_axis_video_TREADY(m_axis_video_TREADY),
    .m_axis_video_TKEEP(MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB),
    .m_axis_video_TUSER(MultiPixStream2AXIvideo_U0_m_axis_video_TUSER),
    .m_axis_video_TLAST(MultiPixStream2AXIvideo_U0_m_axis_video_TLAST),
    .m_axis_video_TID(MultiPixStream2AXIvideo_U0_m_axis_video_TID),
    .m_axis_video_TDEST(MultiPixStream2AXIvideo_U0_m_axis_video_TDEST)
);

zynq_base_v_tpg_0_0_fifo_w24_d16_S bckgndYUV_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgBackground_U0_outImg_din),
    .if_full_n(bckgndYUV_full_n),
    .if_write(tpgBackground_U0_outImg_write),
    .if_dout(bckgndYUV_dout),
    .if_empty_n(bckgndYUV_empty_n),
    .if_read(tpgForeground_U0_srcImg_read)
);

zynq_base_v_tpg_0_0_fifo_w24_d16_S ovrlayYUV_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tpgForeground_U0_outImg_din),
    .if_full_n(ovrlayYUV_full_n),
    .if_write(tpgForeground_U0_outImg_write),
    .if_dout(ovrlayYUV_dout),
    .if_empty_n(ovrlayYUV_empty_n),
    .if_read(MultiPixStream2AXIvideo_U0_ovrlayYUV_read)
);

zynq_base_v_tpg_0_0_start_for_tpgForeground_U0 start_for_tpgForeground_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_tpgForeground_U0_din),
    .if_full_n(start_for_tpgForeground_U0_full_n),
    .if_write(tpgBackground_U0_start_write),
    .if_dout(start_for_tpgForeground_U0_dout),
    .if_empty_n(start_for_tpgForeground_U0_empty_n),
    .if_read(tpgForeground_U0_ap_ready)
);

zynq_base_v_tpg_0_0_start_for_MultiPixStream2AXIvideo_U0 start_for_MultiPixStream2AXIvideo_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_MultiPixStream2AXIvideo_U0_din),
    .if_full_n(start_for_MultiPixStream2AXIvideo_U0_full_n),
    .if_write(tpgForeground_U0_start_write),
    .if_dout(start_for_MultiPixStream2AXIvideo_U0_dout),
    .if_empty_n(start_for_MultiPixStream2AXIvideo_U0_empty_n),
    .if_read(MultiPixStream2AXIvideo_U0_ap_ready)
);

assign MultiPixStream2AXIvideo_U0_ap_continue = 1'b1;

assign MultiPixStream2AXIvideo_U0_ap_start = start_for_MultiPixStream2AXIvideo_U0_empty_n;

assign MultiPixStream2AXIvideo_U0_fid_in = fid_in;

assign MultiPixStream2AXIvideo_U0_start_full_n = 1'b1;

assign MultiPixStream2AXIvideo_U0_start_write = 1'b0;

assign ap_done = MultiPixStream2AXIvideo_U0_ap_done;

assign ap_idle = (tpgForeground_U0_ap_idle & tpgBackground_U0_ap_idle & MultiPixStream2AXIvideo_U0_ap_idle);

assign ap_ready = tpgBackground_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = MultiPixStream2AXIvideo_U0_ap_done;

assign ap_sync_ready = tpgBackground_U0_ap_ready;

assign fid = MultiPixStream2AXIvideo_U0_fid;

assign fid_ap_vld = MultiPixStream2AXIvideo_U0_fid_ap_vld;

assign m_axis_video_TDATA = MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;

assign m_axis_video_TDEST = MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;

assign m_axis_video_TID = MultiPixStream2AXIvideo_U0_m_axis_video_TID;

assign m_axis_video_TKEEP = MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;

assign m_axis_video_TLAST = MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;

assign m_axis_video_TSTRB = MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;

assign m_axis_video_TUSER = MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;

assign m_axis_video_TVALID = MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;

assign start_for_MultiPixStream2AXIvideo_U0_din = 1'b1;

assign start_for_tpgForeground_U0_din = 1'b1;

assign tpgBackground_U0_ap_continue = 1'b1;

assign tpgBackground_U0_ap_start = ap_start;

assign tpgForeground_U0_ap_continue = 1'b1;

assign tpgForeground_U0_ap_start = start_for_tpgForeground_U0_empty_n;


// synthesis translate_off
`include "zynq_base_v_tpg_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //zynq_base_v_tpg_0_0_v_tpg

